{"name":"Active admin import","tagline":"active_admin_import is based on activerecord-import gem  - the most efficient way to import for ActiveAdmin","body":"# ActiveAdminImport \r\nThe most fastest and efficient CSV import for Active Admin\r\nwith support of validations, bulk inserts and encodings handling\r\n\r\n\r\n\r\n[![Build Status](http://img.shields.io/travis/Fivell/active_admin_import.svg)](https://travis-ci.org/Fivell/active_admin_import)\r\n[![Dependency Status](http://img.shields.io/gemnasium/Fivell/active_admin_import.svg)](https://gemnasium.com/Fivell/active_admin_import)\r\n[![Coverage Status](https://coveralls.io/repos/Fivell/active_admin_import/badge.svg)](https://coveralls.io/r/Fivell/active_admin_import)\r\n\r\n[![Code Climate](http://img.shields.io/codeclimate/github/Fivell/active_admin_import.svg)](https://codeclimate.com/github/Fivell/active_admin_import)\r\n[![Gem Version](http://img.shields.io/gem/v/active_admin_import.svg)](https://rubygems.org/gems/active_admin_import)\r\n[![License](http://img.shields.io/:license-mit-blue.svg)](http://Fivell.mit-license.org)\r\n\r\nmaster can be used with AA 1.0.0 and Rails >= 4.1\r\n\r\n\r\n#Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n```ruby\r\ngem \"active_admin_import\" , '2.1.2'\r\n\r\n```\r\nor\r\n\r\n```ruby\r\ngem \"active_admin_import\" , github: \"Fivell/active_admin_import\"\r\n\r\n```\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\n\r\n# active_admin_import features\r\n<ol>\r\n  <li> Replacements (Ex 2)</li>\r\n  <li> Encoding handling (Ex 4, 5)</li>\r\n  <li> CSV options</li>\r\n  <li> Ability to prepend CSV headers automatically</li>\r\n  <li> Bulk import (activerecord-import)</li>\r\n  <li> Callbacks</li>\r\n  <li> Zip files</li>\r\n  <li> more...</li>\r\n</ol>\r\n\r\n   \r\n\r\n\r\n#### Options\r\nTool                    | Description\r\n---------------------   | -----------\r\n:back\t\t\t\t\t|resource action to redirect after processing\r\n:csv_options\t\t\t|hash with column separator, row separator, etc \r\n:validate\t\t\t\t|bool means perform validations or not\r\n:batch_size\t\t\t\t|integer value of max  record count inserted by 1 query/transaction\r\n:before_import\t\t\t|proc for before import action, hook called with  importer object\r\n:after_import\t\t\t|proc for after import action, hook called with  importer object\r\n:before_batch_import\t|proc for before each batch action, called with  importer object\r\n:after_batch_import\t\t|proc for after each batch action, called with  importer object\r\n:on_duplicate_key_update|an Array or Hash, tells activerecord-import to use MySQL's ON DUPLICATE KEY UPDATE ability.\r\n:timestamps\t\t\t\t|bool, tells activerecord-import to not add timestamps (if false) even if record timestamps is disabled in ActiveRecord::Base\r\n:ignore\t\t\t\t\t|bool, tells activerecord-import toto use MySQL's INSERT IGNORE ability\r\n:template\t\t\t\t|custom template rendering\r\n:template_object\t\t|object passing to view\r\n:resource_class\t\t\t|resource class name\r\n:resource_label\t\t\t|resource label value\r\n:plural_resource_label\t|pluralized resource label value (default config.plural_resource_label)\r\n:headers_rewrites\t\t|hash with key (csv header) - value (db column name) rows mapping\r\n\r\n\r\n\r\n#### Default options values\r\n\r\n```ruby    \r\n    back: {action: :import},\r\n    csv_options: {},\r\n    template: \"admin/import\",\r\n    fetch_extra_options_from_params: [],\r\n    resource_class: config.resource_class,\r\n    resource_label:  config.resource_label,\r\n    plural_resource_label: config.plural_resource_label,\r\n```    \r\n\r\n#### Example1 \r\n\r\n```ruby  \r\n    ActiveAdmin.register Post  do\r\n       active_admin_import  validate: false,\r\n                            csv_options: {col_sep: \";\" },\r\n                            before_import: ->(importer){ Post.delete_all },\r\n                            batch_size: 1000\r\n    \r\n    \r\n    end\r\n```\r\n\r\n\r\n#### Example2 Importing to mediate table with insert select operation after import completion\r\n\r\n<p> This config allows to replace data in 1 sql query with callback </p>\r\n\r\n```ruby\r\n    ActiveAdmin.register Post  do\r\n        active_admin_import validate: false,\r\n            csv_options: {col_sep: \";\" },\r\n            resource_class: ImportedPost ,  # we import data into another resource\r\n            before_import: ->(importer){  ImportedPost.delete_all },\r\n            after_import:  ->(importer){\r\n                Post.transaction do\r\n                    Post.delete_all\r\n                    Post.connection.execute(\"INSERT INTO posts (SELECT * FROM imported_posts)\")\r\n                end\r\n            },\r\n            back: -> {  config.namespace.resource_for(Post).route_collection_path } # redirect to post index\r\n    end\r\n```\r\n\r\n\r\n#### Example3 Importing file without headers, but we always know file format, so we can predefine it\r\n\r\n```ruby\r\n    ActiveAdmin.register Post  do\r\n        active_admin_import validate: true,\r\n            template_object: ActiveAdminImport::Model.new(\r\n                hint: \"file will be imported with such header format: 'body','title','author'\",\r\n                csv_headers: [\"body\",\"title\",\"author\"]\r\n            )\r\n    end\r\n```\r\n \r\n#### Example4 Importing  ISO-8859-1 encoded file and disallow archives\r\n\r\n\r\n```ruby\r\n    ActiveAdmin.register Post  do\r\n        active_admin_import validate: true,\r\n            template_object: ActiveAdminImport::Model.new(\r\n                hint: \"file encoded in ISO-8859-1\",\r\n                force_encoding: \"ISO-8859-1\",\r\n                allow_archive: false\r\n            )\r\n    end\r\n```\r\n\r\n#### Example5 Importing file with unknown encoding and autodetect it\r\n\r\n\r\n```ruby\r\n    ActiveAdmin.register Post  do\r\n        active_admin_import validate: true,\r\n            template_object: ActiveAdminImport::Model.new(\r\n                force_encoding: :auto\r\n            )\r\n    end\r\n```\r\n\r\n#### Example6 Callbacks for each bulk insert iteration\r\n\r\n\r\n```ruby\r\n    ActiveAdmin.register Post  do\r\n        active_admin_import validate: true,\r\n        before_batch_import: ->(importer) {\r\n           import.file #current file used\r\n           import.resource #ActiveRecord class to import to\r\n           import.options # options\r\n           import.result # result before bulk iteration\r\n           import.headers # CSV headers\r\n           import.csv_lines #lines to import\r\n           import.model #template_object instance\r\n        },\r\n        after_batch_import: ->(importer) {\r\n           #the same\r\n        }\r\n    end\r\n```    \r\n\r\n#### Example7 update by id emulation\r\n\r\n     ```ruby\r\n         ActiveAdmin.register Post  do\r\n            active_admin_import({\r\n                before_batch_import: ->(importer) {\r\n                    Post.where(id: importer.values_at('id')).delete_all\r\n                }\r\n            })\r\n         end\r\n\r\n      ```\r\n\r\n\r\n\r\n#### Example8 change csv values before import (find each 'Author name' column and replace it with authors_id before insert )\r\n\r\n   ```ruby\r\n     ActiveAdmin.register Post  do\r\n             active_admin_import validate: true,\r\n              headers_rewrites: { :'Author name' => :author_id },\r\n              before_batch_import: ->(importer) {\r\n                authors_names = importer.values_at(:author_id)\r\n                # replacing author name with author id\r\n                authors   = Author.where(name: authors_names).pluck(:name, :id)\r\n                options = Hash[*authors.flatten] # #{\"Jane\" => 2, \"John\" => 1}\r\n                importer.batch_replace(:author_id, options)\r\n              }\r\n         end\r\n  ```\r\n\r\n\r\n#### Example9 dynamic CSV options, template overriding\r\n\r\n -  put overridden template to ```app/views/import.html.erb```\r\n\r\n```erb\r\n\r\n    <p>\r\n       <%= raw(@active_admin_import_model.hint) %> \r\n    </p>\r\n    <%= semantic_form_for @active_admin_import_model, url: {action: :do_import}, html: {multipart: true} do |f| %>\r\n        <%= f.inputs do %>\r\n            <%= f.input :file, as: :file %>\r\n        <% end %>\r\n        <%= f.inputs \"CSV options\", for: [:csv_options, OpenStruct.new(@active_admin_import_model.csv_options)] do |csv| %>\r\n            <% csv.with_options input_html: {style: 'width:40px;'} do |opts| %>\r\n                <%= opts.input :col_sep %>\r\n                <%= opts.input :row_sep %>\r\n                <%= opts.input :quote_char %>\r\n            <% end %>\r\n        <% end %>\r\n    \r\n        <%= f.actions do %>\r\n            <%= f.action :submit, label: t(\"active_admin_import.import_btn\"), button_html: {disable_with: t(\"active_admin_import.import_btn_disabled\")} %>\r\n        <% end %>\r\n    <% end %>\r\n    \r\n```\r\n\r\n - call method with following parameters\r\n\r\n```ruby\r\n    ActiveAdmin.register Post  do\r\n        active_admin_import validate: false,\r\n                          template: 'import' ,\r\n                          template_object: ActiveAdminImport::Model.new(\r\n                              hint: \"specify CSV options\"\r\n                              csv_options: {col_sep: \";\", row_sep: nil, quote_char: nil}\r\n                          )\r\n    end                      \r\n```\r\n\r\n## Dependencies\r\n\r\nTool                  | Description\r\n--------------------- | -----------\r\n[rchardet]            | Character encoding auto-detection in Ruby. As smart as your browser. Open source.\r\n[activerecord-import] | Powerful library for bulk inserting data using ActiveRecord.\r\n\r\n[rchardet]: https://github.com/jmhodges/rchardet\r\n[activerecord-import]: https://github.com/jmhodges/rchardet\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}